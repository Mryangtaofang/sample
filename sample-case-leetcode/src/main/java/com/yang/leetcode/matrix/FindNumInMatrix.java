package com.yang.leetcode.matrix;

import org.junit.Test;

/**
 * 一个二维数组，没一行从左到右递增，每一列从上倒下递增，
 * 输入一个数，判断该数在二维数组中是否存在.
 *
 */
public class FindNumInMatrix {
	
	public boolean Find(int target, int array[][]) {
		if (array == null || array.length <= 0 || array[0].length <= 0) 
			return false;
		
		int y = array.length - 1;
		int x = 0;
		while (y >= 0 && x < array[0].length) {
			int num = array[y][x];

			if (num > target) {
				y--;
			} else if (num < target) {
				x++;
			} else {
				return true;
			}
		}
		return false;
	}
	
	
	@Test
	public void testCase(){
		 int[ ][ ]  arr = {
							 	{1  ,2  ,4  ,6  ,8  ,10 ,11 ,13 ,15 ,17 ,20 ,22 ,24 ,27 ,30 ,32 ,35,36,38,39,42,44,46,47,48,49,51,54,55,56},
							 	{3  ,4  ,6  ,8  ,11 ,13 ,15 ,18 ,19 ,20 ,23 ,25 ,27 ,29 ,33 ,36 ,38,41,42,45,48,50,53,54,57,60,63,65,66,67},
							 	{5  ,7  ,8  ,11 ,14 ,15 ,17 ,19 ,21 ,23 ,24 ,28 ,31 ,33 ,36 ,39 ,41,44,47,49,52,53,56,57,60,63,66,68,71,72},
							 	{7  ,10 ,13 ,14 ,17 ,19 ,22 ,25 ,26 ,27 ,30 ,32 ,34 ,37 ,39 ,42 ,44,46,50,53,55,56,59,61,64,66,69,72,74,76},
							 	{8  ,12 ,16 ,17 ,20 ,21 ,23 ,26 ,29 ,31 ,33 ,35 ,37 ,40 ,42 ,45 ,48,49,52,55,58,59,61,63,67,69,70,74,76,79},
							 	{10 ,15 ,18 ,20 ,22 ,24 ,27 ,30 ,32 ,33 ,36 ,38 ,39 ,41 ,45 ,47 ,50,53,56,58,61,64,65,68,69,71,73,76,79,82},
							 	{13 ,17 ,20 ,23 ,24 ,26 ,28 ,31 ,34 ,36 ,38 ,41 ,42 ,43 ,48 ,50 ,53,56,58,61,64,67,68,71,73,74,75,78,81,84},
							 	{15 ,19 ,22 ,24 ,26 ,28 ,31 ,34 ,35 ,38 ,41 ,44 ,45 ,46 ,49 ,51 ,56,59,61,64,67,69,71,73,76,78,79,82,85,87},
							 	{17 ,20 ,23 ,26 ,29 ,30 ,32 ,37 ,40 ,42 ,43 ,47 ,50 ,53 ,55 ,56 ,58,62,64,66,69,72,75,78,80,81,83,86,88,90},
							 	{18 ,21 ,25 ,28 ,30 ,32 ,35 ,38 ,42 ,43 ,44 ,49 ,51 ,55 ,58 ,59 ,61,65,68,71,73,74,77,79,82,85,88,89,91,93},
							 	{20 ,23 ,28 ,29 ,33 ,36 ,37 ,40 ,43 ,45 ,47 ,52 ,55 ,58 ,60 ,62 ,63,66,70,74,76,77,79,81,85,88,89,91,93,94}
				 			};
		 System.out.println(new FindNumInMatrix().Find(13,arr));
	}
	

}
